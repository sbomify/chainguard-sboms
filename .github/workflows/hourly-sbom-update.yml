---
name: Hourly SBOM Update

'on':
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  # Allow manual triggering
  workflow_dispatch: {}

jobs:
  update-sboms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: mariadb
            component_id: KamSpNwFyelM
          - name: nginx
            component_id: akbcFzHlLtnw
          - name: python
            component_id: BOHKgdYpNiQ7
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        env:
          SBOM_CONVERT_VERSION: 0.0.7
          COSIGN_VERSION: 2.2.0
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

          # Cosign
          curl -LO \
            "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64"
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

          # sbom-convert
          mkdir /tmp/sbom-convert
          cd /tmp/sbom-convert
          curl -LO \
            "https://github.com/protobom/sbom-convert/releases/download/v${SBOM_CONVERT_VERSION}/sbom-convert_linux_amd64.tar.gz"
          tar xvfz sbom-convert_linux_amd64.tar.gz
          mv sbom-convert /usr/local/bin/
          cd $HOME
          rm -rf /tmp/sbom-convert

      - name: Generate SBOM and check for existing version
        id: check_sbom
        env:
          SBOMIFY_TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
        run: |
          # Pull the image first to get the SHA
          docker pull "cgr.dev/chainguard/${{ matrix.image.name }}:latest"

          # Get the image SHA directly from docker inspect
          # (keep sha256: prefix to match API format)
          IMAGE_SHA=$(docker inspect \
            "cgr.dev/chainguard/${{ matrix.image.name }}:latest" \
            | jq -r '.[].Id')

          # Generate the SBOM first to get the actual version
          echo "Generating SBOM to extract version..."
          ./chainguard.sh ${{ matrix.image.name }}

          # Extract the version from the SBOM using documentDescribes reference
          if [ -f "sbom.spdx.json" ]; then
            # Get the main package reference from documentDescribes
            MAIN_PACKAGE_REF=$(jq -r '.documentDescribes[0]' sbom.spdx.json 2>/dev/null || echo "")

            if [ -n "$MAIN_PACKAGE_REF" ] && [ "$MAIN_PACKAGE_REF" != "null" ]; then
              # Get the versionInfo from the referenced package
              SBOM_VERSION=$(jq -r --arg ref "$MAIN_PACKAGE_REF" \
                '.packages[] | select(.SPDXID == $ref) | .versionInfo' \
                sbom.spdx.json 2>/dev/null || echo "unknown")

              echo "SBOM version from main package ($MAIN_PACKAGE_REF): $SBOM_VERSION"
            else
              echo "Could not find documentDescribes reference, using image SHA as version"
              SBOM_VERSION="$IMAGE_SHA"
            fi

            # If we couldn't find a version, fall back to image SHA
            if [ "$SBOM_VERSION" = "unknown" ] || [ "$SBOM_VERSION" = "null" ] || [ -z "$SBOM_VERSION" ]; then
              echo "Could not extract version from main package, using image SHA as version"
              SBOM_VERSION="$IMAGE_SHA"
            fi
          else
            echo "SBOM file not found, using image SHA as version"
            SBOM_VERSION="$IMAGE_SHA"
          fi

          # Store both values as output variables
          echo "image_sha=$IMAGE_SHA" >> $GITHUB_OUTPUT
          echo "sbom_version=$SBOM_VERSION" >> $GITHUB_OUTPUT
          echo "Using SBOM version for duplicate checking: $SBOM_VERSION"

          # Check if SBOM with this version already exists
          echo "Checking if SBOM with version $SBOM_VERSION already exists..."

          # Make API call to check for existing SBOMs with better error handling
          echo "Making API call to component" \
            "${{ matrix.image.component_id }}..."
          API_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
            -H "Authorization: Bearer $SBOMIFY_TOKEN" \
            "https://app.sbomify.com/api/v1/components/${{ matrix.image.component_id }}/sboms")

          # Extract HTTP status and response body
          HTTP_STATUS=$(echo "$API_RESPONSE" | \
            grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$API_RESPONSE" | \
            sed 's/HTTP_STATUS:[0-9]*$//')

          echo "API HTTP Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "API call successful"

            # Validate JSON response
            if echo "$RESPONSE_BODY" | jq empty 2>/dev/null; then
              echo "Valid JSON response received"

              # Log information about existing SBOMs
              TOTAL_SBOMS=$(echo "$RESPONSE_BODY" | jq -r '.items | length' 2>/dev/null || echo "0")
              echo "Found $TOTAL_SBOMS total existing SBOMs for component ${{ matrix.image.component_id }}"

              if [ "$TOTAL_SBOMS" -gt 0 ]; then
                echo "Latest release information:"
                echo "$RESPONSE_BODY" | jq -r '.items[0] | "  Latest SBOM ID: \(.sbom.id)"' 2>/dev/null || echo "  Could not parse latest SBOM ID"
                echo "$RESPONSE_BODY" | jq -r '.items[0] | "  Latest Version: \(.sbom.version)"' 2>/dev/null || echo "  Could not parse latest version"
                echo "$RESPONSE_BODY" | jq -r '.items[0] | "  Created: \(.sbom.created_at)"' 2>/dev/null || echo "  Could not parse creation date"

                # Show all existing versions for reference
                echo "All existing versions:"
                echo "$RESPONSE_BODY" | jq -r '.items[] | "  - \(.sbom.version) (created: \(.sbom.created_at))"' 2>/dev/null || echo "  Could not parse versions"
              else
                echo "No existing SBOMs found for this component"
              fi

              # Check for existing version using SBOM version
              EXISTING_COUNT=$(echo "$RESPONSE_BODY" | \
                jq -r --arg version "$SBOM_VERSION" \
                '[.items[]? | select(.sbom.version == $version)] | length' \
                2>/dev/null || echo "0")

              echo "Checking for SBOM version: $SBOM_VERSION"
              echo "Found $EXISTING_COUNT existing SBOMs with matching version"

              if [ "$EXISTING_COUNT" -gt 0 ]; then
                echo "✓ SBOM with version $SBOM_VERSION" \
                  "already exists ($EXISTING_COUNT found)"
                echo "Skipping SBOM generation and upload..."
                echo "skip_upload=true" >> $GITHUB_OUTPUT
              else
                echo "✗ No existing SBOM found with version $SBOM_VERSION"
                echo "Proceeding with SBOM generation..."
                echo "skip_upload=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "ERROR: Invalid JSON response from API"
              echo "Response: $RESPONSE_BODY"
              echo "Proceeding with upload as fallback..."
              echo "skip_upload=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ERROR: API call failed with status $HTTP_STATUS"
            echo "Response: $RESPONSE_BODY"
            echo "Proceeding with upload as fallback..."
            echo "skip_upload=false" >> $GITHUB_OUTPUT
          fi

      - name: Process SBOM for ${{ matrix.image.name }}
        if: steps.check_sbom.outputs.skip_upload != 'true'
        id: update_sbom
        run: |
          # SBOM was already generated in the previous step, just process it

          mkdir -p sboms
          mv sbom.spdx.json sboms/${{ matrix.image.name }}-sbom.spdx.json

          # Generate CDX
          sbom-convert convert \
            sboms/${{ matrix.image.name }}-sbom.spdx.json \
            -o sboms/${{ matrix.image.name }}-sbom.cdx.json

          # Validate SBOM JSON
          if ! jq empty sboms/${{ matrix.image.name }}-sbom.spdx.json; then
            echo "Error: Invalid SPDX JSON in SBOM file"
            exit 1
          elif ! jq empty sboms/${{ matrix.image.name }}-sbom.cdx.json; then
            echo "Error: Invalid CDX JSON in SBOM file"
            exit 1
          fi
          echo "SBOM validation successful: Valid JSON format"

      - name: Upload SPDX SBOM to sbomify
        if: steps.check_sbom.outputs.skip_upload != 'true'
        id: upload_spdx_sbom
        uses: sbomify/github-action@master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_NAME: ${{ matrix.image.name }}
          COMPONENT_ID: ${{ matrix.image.component_id }}
          COMPONENT_VERSION: ${{ steps.check_sbom.outputs.sbom_version }}
          SBOM_FILE: 'sboms/${{ matrix.image.name }}-sbom.spdx.json'
          AUGMENT: false
          ENRICH: false
