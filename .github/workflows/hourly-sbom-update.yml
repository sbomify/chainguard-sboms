---
name: Hourly SBOM Update

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  update-sboms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: mariadb
            component_id: IxPLKN9uQwaB
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        env:
          SBOM_CONVERT_VERSION: 0.0.7
          COSIGN_VERSION: 2.2.0
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

          # Cosign
          curl -LO \
            "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64"
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

          # sbom-convert
          mkdir /tmp/sbom-convert
          cd /tmp/sbom-convert
          curl -LO \
            "https://github.com/protobom/sbom-convert/releases/download/v${SBOM_CONVERT_VERSION}/sbom-convert_linux_amd64.tar.gz"
          tar xvfz sbom-convert_linux_amd64.tar.gz
          mv sbom-convert /usr/local/bin/
          cd $HOME
          rm -rf /tmp/sbom-convert

      - name: Get image SHA and check existing SBOM
        id: check_sbom
        env:
          SBOMIFY_TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
        run: |
          # Pull the image first to get the SHA
          docker pull "cgr.dev/chainguard/${{ matrix.image.name }}:latest"

          # Get the image SHA directly from docker inspect
          IMAGE_SHA=$(docker inspect "cgr.dev/chainguard/${{ matrix.image.name }}:latest" | jq -r '.[].Id' | cut -d':' -f2)

          # Store the SHA as an output variable
          echo "image_sha=$IMAGE_SHA" >> $GITHUB_OUTPUT
          echo "Using image SHA: $IMAGE_SHA"

          # Check if SBOM with this version already exists
          echo "Checking if SBOM with version $IMAGE_SHA already exists..."

          # Make API call and check for existing version in one clean operation
          EXISTING_COUNT=$(curl -s -H "Authorization: Bearer $SBOMIFY_TOKEN" \
            "https://app.sbomify.com/api/v1/components/${{ matrix.image.component_id }}/sboms" \
            | jq -r --arg version "$IMAGE_SHA" '[.items[]? | select(.sbom.version == $version)] | length' 2>/dev/null || echo "0")

          if [ "$EXISTING_COUNT" -gt 0 ]; then
            echo "✓ SBOM with version $IMAGE_SHA already exists ($EXISTING_COUNT found)"
            echo "Skipping SBOM generation and upload..."
            echo "skip_upload=true" >> $GITHUB_OUTPUT
          else
            echo "✗ No existing SBOM found with version $IMAGE_SHA"
            echo "Proceeding with SBOM generation..."
            echo "skip_upload=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate SBOM for ${{ matrix.image.name }}
        if: steps.check_sbom.outputs.skip_upload != 'true'
        id: update_sbom
        run: |
          # Run the script to generate the SBOM (image is already pulled)
          ./chainguard.sh ${{ matrix.image.name }}

          mkdir -p sboms
          mv sbom.spdx.json sboms/${{ matrix.image.name }}-sbom.spdx.json

          # Generate CDX
          sbom-convert convert \
            sboms/${{ matrix.image.name }}-sbom.spdx.json \
            -o sboms/${{ matrix.image.name }}-sbom.cdx.json

          # Validate SBOM JSON
          if ! jq empty sboms/${{ matrix.image.name }}-sbom.spdx.json; then
            echo "Error: Invalid SPDX JSON in SBOM file"
            exit 1
          elif ! jq empty sboms/${{ matrix.image.name }}-sbom.cdx.json; then
            echo "Error: Invalid CDX JSON in SBOM file"
            exit 1
          fi
          echo "SBOM validation successful: Valid JSON format"

      - name: Upload SPDX SBOM to sbomify
        if: steps.check_sbom.outputs.skip_upload != 'true'
        id: upload_spdx_sbom
        uses: sbomify/github-action@master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_ID: ${{ matrix.image.component_id }}
          SBOM_FILE: 'sboms/${{ matrix.image.name }}-sbom.spdx.json'
          SBOM_VERSION: ${{ steps.check_sbom.outputs.image_sha }}

      - name: Upload CDX SBOM to sbomify
        if: steps.check_sbom.outputs.skip_upload != 'true'
        id: upload_cdx_sbom
        uses: sbomify/github-action@master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_ID: ${{ matrix.image.component_id }}
          SBOM_FILE: 'sboms/${{ matrix.image.name }}-sbom.cdx.json'
          SBOM_VERSION: ${{ steps.check_sbom.outputs.image_sha }}
